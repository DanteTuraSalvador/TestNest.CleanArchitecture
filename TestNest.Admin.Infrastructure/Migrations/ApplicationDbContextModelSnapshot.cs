// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestNest.Admin.Infrastructure.Persistence;

#nullable disable

namespace TestNest.Admin.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestNest.Admin.Domain.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EmployeeId");

                    b.Property<Guid>("EmployeeRoleId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EmployeeRoleId");

                    b.Property<int>("EmployeeStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("EmployeeStatusId")
                        .HasDefaultValueSql("(-1)");

                    b.Property<Guid>("EstablishmentId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentId");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EmployeeRoleId");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Employees.EmployeeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EmployeeRoleId");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("EmployeeRoles", (string)null);
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.Establishment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentId");

                    b.Property<int>("EstablishmentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("EstablishmentStatusId")
                        .HasDefaultValueSql("(-1)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Establishments", (string)null);
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.EstablishmentAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentAddressId");

                    b.Property<Guid>("EstablishmentId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentId");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("IsPrimary");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EstablishmentId");

                    b.ToTable("EstablishmentAddresses", (string)null);
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.EstablishmentContact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentContactId");

                    b.Property<Guid>("EstablishmentId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentId");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("IsPrimary");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EstablishmentId");

                    b.ToTable("EstablishmentContacts", (string)null);
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.EstablishmentMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentMemberId");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EmployeeId");

                    b.Property<Guid>("EstablishmentId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentId");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("EstablishmentMembers", (string)null);
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.EstablishmentPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentPhoneId");

                    b.Property<Guid>("EstablishmentId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentId");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("IsPrimary");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EstablishmentId");

                    b.ToTable("EstablishmentPhones", (string)null);
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.EstablishmentSocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentSocialMediaId");

                    b.Property<Guid>("EstablishmentId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("EstablishmentId");

                    b.Property<Guid>("SocialMediaId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("SocialMediaId");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("SocialMediaId");

                    b.ToTable("EstablishmentSocialMedia", (string)null);
                });

            modelBuilder.Entity("TestNest.Admin.Domain.SocialMedias.SocialMediaPlatform", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("SocialMediaId");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("SocialMediaPlatforms", (string)null);
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Employees.Employee", b =>
                {
                    b.HasOne("TestNest.Admin.Domain.Employees.EmployeeRole", "EmployeeRole")
                        .WithMany()
                        .HasForeignKey("EmployeeRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestNest.Admin.Domain.Establishments.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.EmailAddress", "EmployeeEmail", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.PersonName", "EmployeeName", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("MiddleName");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.EmployeeNumber", "EmployeeNumber", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("EmployeeNo")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("EmployeeNumber");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("EmployeeEmail")
                        .IsRequired();

                    b.Navigation("EmployeeName")
                        .IsRequired();

                    b.Navigation("EmployeeNumber")
                        .IsRequired();

                    b.Navigation("EmployeeRole");

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Employees.EmployeeRole", b =>
                {
                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.RoleName", "RoleName", b1 =>
                        {
                            b1.Property<Guid>("EmployeeRoleId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("RoleName");

                            b1.HasKey("EmployeeRoleId");

                            b1.HasIndex("Name")
                                .IsUnique()
                                .HasDatabaseName("IX_EmployeeRole_RoleName");

                            b1.ToTable("EmployeeRoles");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeRoleId");
                        });

                    b.Navigation("RoleName")
                        .IsRequired();
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.Establishment", b =>
                {
                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.EmailAddress", "EstablishmentEmail", b1 =>
                        {
                            b1.Property<Guid>("EstablishmentId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("EstablishmentEmail");

                            b1.HasKey("EstablishmentId");

                            b1.ToTable("Establishments");

                            b1.WithOwner()
                                .HasForeignKey("EstablishmentId");
                        });

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.EstablishmentName", "EstablishmentName", b1 =>
                        {
                            b1.Property<Guid>("EstablishmentId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("EstablishmentName");

                            b1.HasKey("EstablishmentId");

                            b1.ToTable("Establishments");

                            b1.WithOwner()
                                .HasForeignKey("EstablishmentId");
                        });

                    b.Navigation("EstablishmentEmail")
                        .IsRequired();

                    b.Navigation("EstablishmentName")
                        .IsRequired();
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.EstablishmentAddress", b =>
                {
                    b.HasOne("TestNest.Admin.Domain.Establishments.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("EstablishmentAddressId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("AddressLine")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("AddressLine");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Country");

                            b1.Property<double>("Latitude")
                                .HasColumnType("FLOAT")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("FLOAT")
                                .HasColumnName("Longitude");

                            b1.Property<string>("Municipality")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Municipality");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Province");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Region");

                            b1.HasKey("EstablishmentAddressId");

                            b1.ToTable("EstablishmentAddresses");

                            b1.WithOwner()
                                .HasForeignKey("EstablishmentAddressId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.EstablishmentContact", b =>
                {
                    b.HasOne("TestNest.Admin.Domain.Establishments.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.PersonName", "ContactPerson", b1 =>
                        {
                            b1.Property<Guid>("EstablishmentContactId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("ContactFirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("ContactLastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("ContactMiddleName");

                            b1.HasKey("EstablishmentContactId");

                            b1.ToTable("EstablishmentContacts");

                            b1.WithOwner()
                                .HasForeignKey("EstablishmentContactId");
                        });

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.PhoneNumber", "ContactPhone", b1 =>
                        {
                            b1.Property<Guid>("EstablishmentContactId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("PhoneNo")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("ContactPhone");

                            b1.HasKey("EstablishmentContactId");

                            b1.ToTable("EstablishmentContacts");

                            b1.WithOwner()
                                .HasForeignKey("EstablishmentContactId");
                        });

                    b.Navigation("ContactPerson")
                        .IsRequired();

                    b.Navigation("ContactPhone")
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.EstablishmentMember", b =>
                {
                    b.HasOne("TestNest.Admin.Domain.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestNest.Admin.Domain.Establishments.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.MemberDescription", "MemberDescription", b1 =>
                        {
                            b1.Property<Guid>("EstablishmentMemberId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("MemberDescription");

                            b1.HasKey("EstablishmentMemberId");

                            b1.ToTable("EstablishmentMembers");

                            b1.WithOwner()
                                .HasForeignKey("EstablishmentMemberId");
                        });

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.MemberTag", "MemberTag", b1 =>
                        {
                            b1.Property<Guid>("EstablishmentMemberId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Tag")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("MemberTag");

                            b1.HasKey("EstablishmentMemberId");

                            b1.ToTable("EstablishmentMembers");

                            b1.WithOwner()
                                .HasForeignKey("EstablishmentMemberId");
                        });

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.MemberTitle", "MemberTitle", b1 =>
                        {
                            b1.Property<Guid>("EstablishmentMemberId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("MemberTitle");

                            b1.HasKey("EstablishmentMemberId");

                            b1.ToTable("EstablishmentMembers");

                            b1.WithOwner()
                                .HasForeignKey("EstablishmentMemberId");
                        });

                    b.Navigation("Employee");

                    b.Navigation("Establishment");

                    b.Navigation("MemberDescription")
                        .IsRequired();

                    b.Navigation("MemberTag")
                        .IsRequired();

                    b.Navigation("MemberTitle")
                        .IsRequired();
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.EstablishmentPhone", b =>
                {
                    b.HasOne("TestNest.Admin.Domain.Establishments.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.PhoneNumber", "EstablishmentPhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("EstablishmentPhoneId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("PhoneNo")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("EstablishmentPhoneId");

                            b1.ToTable("EstablishmentPhones");

                            b1.WithOwner()
                                .HasForeignKey("EstablishmentPhoneId");
                        });

                    b.Navigation("Establishment");

                    b.Navigation("EstablishmentPhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("TestNest.Admin.Domain.Establishments.EstablishmentSocialMedia", b =>
                {
                    b.HasOne("TestNest.Admin.Domain.Establishments.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestNest.Admin.Domain.SocialMedias.SocialMediaPlatform", "SocialMedia")
                        .WithMany()
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.SocialMediaAccountName", "SocialMediaAccountName", b1 =>
                        {
                            b1.Property<Guid>("EstablishmentSocialMediaId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("AccountName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("SocialMediaAccountName");

                            b1.HasKey("EstablishmentSocialMediaId");

                            b1.ToTable("EstablishmentSocialMedia");

                            b1.WithOwner()
                                .HasForeignKey("EstablishmentSocialMediaId");
                        });

                    b.Navigation("Establishment");

                    b.Navigation("SocialMedia");

                    b.Navigation("SocialMediaAccountName")
                        .IsRequired();
                });

            modelBuilder.Entity("TestNest.Admin.Domain.SocialMedias.SocialMediaPlatform", b =>
                {
                    b.OwnsOne("TestNest.Admin.SharedLibrary.ValueObjects.SocialMediaName", "SocialMediaName", b1 =>
                        {
                            b1.Property<Guid>("SocialMediaPlatformId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("SocialMediaName");

                            b1.Property<string>("PlatformURL")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("PlatformURL");

                            b1.HasKey("SocialMediaPlatformId");

                            b1.HasIndex("Name")
                                .IsUnique()
                                .HasDatabaseName("IX_SocialMediaName");

                            b1.ToTable("SocialMediaPlatforms");

                            b1.WithOwner()
                                .HasForeignKey("SocialMediaPlatformId");
                        });

                    b.Navigation("SocialMediaName")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
